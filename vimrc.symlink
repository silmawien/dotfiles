"Pathogenic
call pathogen#infect()
syntax enable
filetype plugin indent on

"Solarized
set background=dark
"colorscheme solarized
set t_Co=16

"Misc
set tabstop=8
set shiftwidth=4
set expandtab

"Tab completion for e.g. :help pat<TAB>
set wildmenu

"Show file pos in status bar
set ruler

"Show commands as they are typed
set showcmd

"Show line numbers
"set number

"Allow hiding of modified buffers
set hidden

"Search is ignorecase, incremental, does not wrap
set nowrapscan
set ignorecase
set incsearch

set softtabstop=4
set shiftround
set laststatus=2

map <F5> :wa<CR>:!make<CR>
"set mouse=a

let mapleader = ","
let maplocalleader = ","

" Move by wrapped lines by default
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

" Vimscript file settings {{{
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END

nnoremap <leader>ev :split $MYVIMRC<cr>G
nnoremap <leader>sv :source $MYVIMRC<cr>

" }}}

" Color column {{{
highlight ColorColumn ctermbg=8
augroup colorcolumn
    au!
    au InsertLeave * set colorcolumn&
    au InsertEnter * set colorcolumn=+1
augroup END
" }}}

" Timeout on key codes, no timeout for mappings.
set notimeout
set ttimeout
" Remove most of the delay from <ESC> in insert/command mode,
" but leave some room for arrow keys and other ^[-sequences to work.
set timeoutlen=20

" Show highlight under cursor
function! ShowHighlight()
    for id in synstack(line("."), col("."))
        echom synIDattr(id, "name")
    endfor
endfunction
nnoremap <leader>sh :call ShowHighlight()<cr>

" Testing area

nnoremap <leader>j :cnext<cr>
nnoremap <leader>k :cprevious<cr>
inoremap jk <ESC>
nnoremap <leader>n :setlocal number!<cr>
nnoremap <leader>N :setlocal relativenumber!<cr>

nnoremap <leader>q :call <SID>ToggleQuickFix()<cr>

" Create markdown link from current word
nmap <leader>a ysiw]yiW%a[]<esc>/^$<cr>o<esc>pA: 
vmap <leader>a S]y%%a[]<esc>/^$<cr>o<esc>pA: 

let g:quickfix_is_open=0

function! s:ToggleQuickFix()
    if g:quickfix_is_open
        cclose
        let g:quickfix_is_open=0
        execute g:quickfix_return_to_window . "wincmd w"
    else
        let g:quickfix_return_to_window = winnr()
        copen
        let g:quickfix_is_open=1
    endif
endfunction

set noswapfile
nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l
nnoremap <c-q> <c-w>q

"Cycle through buffers
nnoremap <c-h> :bprev<cr>
nnoremap <c-l> :bnext<cr>

highlight LineNr ctermbg=0 ctermfg=8
highlight Comment ctermfg=8
highlight link clojureParen NONE
highlight link clojureSpecial Keyword
